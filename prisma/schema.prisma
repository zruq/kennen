generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                 @id @default(cuid())
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  collections             Collection[]
  questions               Question[]
  multipleChoiceQuestions MultipleChoice[]
  multipleChoiceOptions   MultipleChoiceOption[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id        Int        @id @default(autoincrement())
  name      String
  questions Question[]

  createdBy User?   @relation(fields: [userId], references: [id])
  userId    String?
}

enum QuestionType {
  multiple_choice
}

model Question {
  id             Int             @id @default(autoincrement())
  text           String
  type           QuestionType
  collection     Collection      @relation(fields: [collectionId], references: [id])
  collectionId   Int
  multipleChoice MultipleChoice?
  createdBy      User?           @relation(fields: [userId], references: [id])
  userId         String?
}

model MultipleChoice {
  id            Int                    @id @default(autoincrement())
  choices_limit Int                    @default(1)
  question      Question               @relation(fields: [questionId], references: [id])
  questionId    Int                    @unique
  options       MultipleChoiceOption[]
  createdBy     User?                  @relation(fields: [userId], references: [id])
  userId        String?
}

model MultipleChoiceOption {
  id               Int            @id @default(autoincrement())
  text             String
  isCorrect        Boolean        @default(false)
  MultipleChoice   MultipleChoice @relation(fields: [multipleChoiceId], references: [id])
  multipleChoiceId Int
  createdBy        User?          @relation(fields: [userId], references: [id])
  userId           String?
}
